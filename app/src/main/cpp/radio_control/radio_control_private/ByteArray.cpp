#include "ByteArray.h"

/////////////////////////////////////////////////////////////////////////////

ByteArray ByteArray::left(int len) const
{
    return mid(0, len);
}

/////////////////////////////////////////////////////////////////////////////

ByteArray ByteArray::mid(size_t index, int len) const
{
    auto first = m_vec.begin() + index;
    auto last = (len < 0) ? m_vec.end() : m_vec.begin() + index + len;
    return ByteArray(std::vector<ByteArray::Byte>(first, last));
}

/////////////////////////////////////////////////////////////////////////////

std::string ByteArray::toHexString(char sep) const
{
    static const char hex[] = "0123456789abcdef";

    std::string str;
    str.reserve(3 * m_vec.size());

    for (size_t n = 0; n < m_vec.size(); n++) {
        if (n && sep)
            str += sep;

        auto b = m_vec[n];
        str += hex[(b >> 4) & 0x0F];
        str += hex[(b) & 0x0F];
    }

    return str;
}

/////////////////////////////////////////////////////////////////////////////

ByteArray ByteArray::fromHexString(const std::string& str)
{
    static const signed char hex[256] = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,
        -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    };

    std::vector<ByteArray::Byte> vec;

    int hi = -1;
    for (unsigned char c : str) {
        int v = hex[c];
        if (v < 0)
            continue;

        if (hi < 0) {
            hi = v;
        }
        else {
            vec.push_back(hi << 4 | v);
            hi = -1;
        }
    }

    return ByteArray(vec);
}

/////////////////////////////////////////////////////////////////////////////
